// 按位非：按位非操作符用波浪符（~）表示，它的作用是返回数值的一补数。按位非的最终效果是对
// 数值取反并减1
let num1 = 25; // 二进制00000000000000000000000000011001
let num2 = ~num1; // 二进制11111111111111111111111111100110
console.log(num2); // -26

// 按位与：按位与操作符用和号（&）表示，有两个操作数。本质上，按位与就是将两个数的每一个位对齐，
// 然后基于真值表中的规则，对每一位执行相应的与操作。按位与操作在两个位都是1 时返回1，在任何一位是0 时返回0。
{
    let result = 25 & 3;
    console.log(result); // 1

    //  25 = 0000 0000 0000 0000 0000 0000 0001 1001
    //   3 = 0000 0000 0000 0000 0000 0000 0000 0011
    // ---------------------------------------------
    // AND = 0000 0000 0000 0000 0000 0000 0000 0001
}

// 按位或：按位或操作符用管道符（|）表示，同样有两个操作数。按位或操作在至少一位是1 时返回1，两位都是0 时返回0。
{
    let result = 25 | 3;
    console.log(result); // 27

    //  25 = 0000 0000 0000 0000 0000 0000 0001 1001
    //  3  = 0000 0000 0000 0000 0000 0000 0000 0011
    // ---------------------------------------------
    //  OR = 0000 0000 0000 0000 0000 0000 0001 1011
}

// 按位异或：按位异或与按位或的区别是，它只在一位上是1 的时候返回1（两位都是1 或0，则返回0）。
{
    let result = 25 ^ 3;
    console.log(result); // 26

    //  25 = 0000 0000 0000 0000 0000 0000 0001 1001
    //   3 = 0000 0000 0000 0000 0000 0000 0000 0011
    // ---------------------------------------------
    // XOR = 0000 0000 0000 0000 0000 0000 0001 1010
}